---
# Stand up a home automation host
- name: Configure home automation suite
  hosts: all
  remote_user: ubuntu
  environment:
    DOCKER_HOST: unix:{{ ansible_env.XDG_RUNTIME_DIR }}/podman/podman.sock
  tasks:
    # Set proper hostname
    - name: Set hostname
      ansible.builtin.hostname:
        name: homeautomation
      become: yes
    # Install & enable container runtime
    - name: Ensure podman-docker is installed
      ansible.builtin.apt:
        name: podman-docker
        state: present
      become: yes
    - name: Ensure podman socket is available
      ansible.builtin.systemd:
        name: podman.socket
        enabled: true
      become: yes
    - name: Create systemd user folder
      ansible.builtin.file:
        dest: "{{ ansible_env.HOME }}/.config/systemd/user"
        state: directory
    - name: Link podman-restart.service to user home directory
      ansible.builtin.file:
        src: /lib/systemd/system/podman-restart.service
        dest: "{{ ansible_env.HOME }}/.config/systemd/user/podman-restart.service"
        state: link
    - name: Ensure podman-restart service is enabled
      ansible.builtin.systemd:
        name: podman-restart.service
        scope: user
        enabled: true
        daemon_reload: true # Otherwise systemd won't see the new service the first time this step runs
    - name: Enable lingering for user
      ansible.builtin.command: "loginctl enable-linger {{ ansible_env.USER }}"
    # Stand up HomeBridge
    - name: Copy HomeBridge docker-compose.yaml to remote host
      ansible.builtin.copy:
        src: ../../docker/homebridge/
        dest: "{{ ansible_env.HOME }}/homebridge-docker-compose/"
        mode: 0600
        directory_mode: 0700
    - name: Stand up HomeBridge via docker-compose
      community.docker.docker_compose:
        project_src: "{{ ansible_env.HOME }}/homebridge-docker-compose"
        state: present
    # Stand up HomeAssistant pre-reqs:
    - name: Create folder for zwave-js-ui storage
      ansible.builtin.file:
        dest: "{{ ansible_env.HOME }}/zwave-js-ui/zwave-config"
        state: directory
    # Derived from https://raw.githubusercontent.com/zwave-js/zwave-js-ui/master/docker/docker-compose.yml
    - name: Stand up zwave-js-ui container # Can't use docker compose, for same reason as Home Assistant, see below
      containers.podman.podman_container:
        state: started
        name: zwave-js-ui
        image: "docker.io/zwavejs/zwave-js-ui:latest"
        restart_policy: always
        tty: true
        stop_signal: 2 # SIGINT
        env:
          SESSION_SECRET: "{{ lookup('amazon.aws.aws_secret', 'ansible/zwave-js-ui/SESSION_SECRET') }}"
          ZWAVEJS_EXTERNAL_CONFIG: /usr/src/app/store/.config-db
        network:
          - host # We're going to isolate Home Assistant using a VLAN rather than doing it here. TODO, improve this
        device:
          - /dev/ttyUSB0:/dev/zwave
        volume:
          - "{{ ansible_env.HOME }}/zwave-js-ui/zwave-config:/usr/src/app/store"
        ports:
          - '8091:8091' # Web interface
          - '3000:3000' # Websocket
        annotation:
          run.oci.keep_original_groups: "1" # Needed to allow container to access the ZWave device.
    # Stand up HomeAssistant
    - name: Create folder for HomeAssistant storage
      ansible.builtin.file:
        dest: "{{ ansible_env.HOME }}/homeassistant/volumes/config/"
        state: directory
    - name: Stand up HomeAssitant via podman # We need to use podman directly since it supports setting annotations, which we need for run.oci.keep_original_groups
      containers.podman.podman_container:
        state: started
        name: homeassistant
        image: "ghcr.io/home-assistant/home-assistant:stable"
        restart_policy: always
        device:
          - "/dev/ttyUSB1:/dev/ttyUSB1"
        cap_add:
          - "CAP_NET_RAW"
          - "CAP_NET_BIND_SERVICE"
        volume:
          - "{{ ansible_env.HOME }}/homeassistant/volumes/config:/config"
          - "/etc/localtime:/etc/localtime:ro"
        network:
          - host # We're going to isolate Home Assistant at the network level
        ports:
          - "8123:8123"
        annotation:
          # I've chosen to use Podman as my container engine. None of what I'm about to describe is even an issue if you're using Docker, apparently.
          # This annotation is since we need to ensure that the ID of the `dailout` group (which owns /dev/ttyUSB0 and /dev/ttyUSB1) on our host is preserved
          # for that group in our container. See https://github.com/containers/podman/issues/9706 and https://github.com/containers/podman/pull/9495
          # for more information on the annotation, and https://github.com/BallAerospace/COSMOS/issues/1508#issuecomment-1124347673
          # for info on why we can't use docker-compose with annotations.
          run.oci.keep_original_groups: "1"
